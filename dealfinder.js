/*
$.ajax({ url: '/api/get-items-onsite', type: 'post', headers: {'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')}, success: function (data) {console.log(data)}});
doesnt filter the results and uses rolimons value instead of rap, the price shown is an estimate after tax
automatically removes marked projected items from the list

getDeals function (see bottom line)
first option: getDeals(rate, minprice, maxprice, rateaftertax, priceaftertax)
                        ^ the absolute max rate that the deal finder will show

second option: getDeals(rate, minprice, maxprice, rateaftertax, priceaftertax)
                                ^ the minimum price that the deal finder will show

third option: getDeals(rate, minprice, maxprice, rateaftertax, priceaftertax)
                                            ^ the maximum price that the deal finder will show

fourth option: getDeals(rate, minprice, maxprice, rateaftertax, priceaftertax)
                                                    ^ whether or not the rate is using the price before or after tax

fifth option: getDeals(rate, minprice, maxprice, rateaftertax, priceaftertax)
                                                                ^ whether or not the price shown is before or after tax
*/

axios = require('axios');
fs = require('fs');
var adurdata = require('./items.json');
var rolidata = [];
function getTimeStamp() {
    var timestamp = new Date(Date.now()).toISOString();
    return `${timestamp}`;
};
async function getRoliApi() { 
    await axios.get('https://www.rolimons.com/itemapi/itemdetails').then(res=>{
        rolidata = res.data;
    }).catch(err => {
        console.error(err);
    });
};
async function getDeals(rate, minprice, maxprice, rateAfterTax, priceAfterTax) {
    await getRoliApi(); var bruh = ""; var itemRate;
    for (const i in adurdata.items.items) {
        var price = ""; if (priceAfterTax) { price = (adurdata.items.items[i].price * 1.03).toFixed(2) } else { price = adurdata.items.items[i].price }
        if (rateAfterTax) {  itemRate = Number((price) / (rolidata.items[adurdata.items.items[i].limited_id][4] / 1000)).toFixed(2); } else { itemRate = Number((price) / (rolidata.items[adurdata.items.items[i].limited_id][4] / 1000)).toFixed(2); }
        if (itemRate <= rate && price > minprice && price < maxprice && rolidata.items[adurdata.items.items[i].limited_id][7].toString() == "-1") { // if you want projecteds to be shown, remove "&& rolidata.items[adurdata.items.items[i].limited_id][7].toString() == "-1""
            bruh += `${adurdata.items.items[i].limited_name} | $${price} | ${(rolidata.items[adurdata.items.items[i].limited_id][4] / 1000).toFixed(1)}K | ${itemRate}/1\n`;
        };
    };
    bruh += `Generated by aduritesexbot69 at ${getTimeStamp()}\nSettings: max rate: ${rate}/1 min price: $${minprice} max price: $${maxprice}`
    fs.writeFile('./dealfinder.txt', bruh, function (error, data) {
        if (error) {
            console.log(error);
        };
        console.log(bruh);
    });
};
getDeals(2.2, 0, 999999, false, false);
